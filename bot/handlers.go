package bot

import (
	"fmt"
	"gopkg.in/telebot.v3"
)

func (b *Bot) handleCalcScoreCommand(ctx telebot.Context) error {
	var fst, snd float64
	ch := make(chan bool)

	ctx.Send("–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –∑–∞ 1-—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Ç—Ä–∏–º–µ—Å—Ç—Ä–∞ (1st Attestation):")
	getPercentageResponse(&fst, ctx, ch)

	<-ch // Wait for user's response

	ctx.Send("–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –∑–∞ 2-—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Ç—Ä–∏–º–µ—Å—Ç—Ä–∞ (2nd Attestation):")
	getPercentageResponse(&snd, ctx, ch)

	<-ch // Wait for user's response

	firstAttestationScore := fst * 0.3
	secondAttestationScore := snd * 0.3
	finalScoreNeededForScholarship := (70 - (firstAttestationScore + secondAttestationScore)) / 0.4
	finalScoreNeededForIncreasedScholarship := (90.5 - (firstAttestationScore + secondAttestationScore)) / 0.4
	scoreIf100 := (fst+snd)*0.3 + 40

	MapValue(&finalScoreNeededForScholarship, 50, 100)
	MapValue(&finalScoreNeededForIncreasedScholarship, 50, 100)

	if (fst+snd)/2 < 50 {
		ctx.Send("üî¥ GG  Retake")
		return nil
	}

	ctx.Send(fmt.Sprintf("üî¥ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>70)  \n %.2f%% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ.", finalScoreNeededForScholarship))

	if finalScoreNeededForIncreasedScholarship > 100 {
		ctx.Send("üîµ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 90> –±–∞–ª–ª–æ–≤.")
	} else {
		ctx.Send(fmt.Sprintf("üîµ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>90)  \n %.2f%% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ.", finalScoreNeededForIncreasedScholarship))
	}

	ctx.Send(fmt.Sprintf("‚ö™Ô∏è –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—à—å –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ 100 : \n %.2f%%.", scoreIf100))

	return nil
}

func (b *Bot) handleStartCommand(ctx telebot.Context) error {
	ctx.Send(fmt.Sprintf("Hello, %s! Welcome to my bot.", ctx.Sender().FirstName), b.menus.HomeMenu)
	return nil
}
func (b *Bot) HandleHelpCommand(ctx telebot.Context) error {
	ctx.Send(fmt.Sprintf("ü§ñ I can calculate you scores.\n"), b.menus.HelpMenu)

	return nil
}
